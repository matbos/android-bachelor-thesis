package pl.mbos.bachelor_thesis.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import pl.mbos.bachelor_thesis.dao.PowerEEG;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table POWER_EEG.
*/
public class PowerEEGDao extends AbstractDao<PowerEEG, Void> {

    public static final String TABLENAME = "POWER_EEG";

    /**
     * Properties of entity PowerEEG.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserId = new Property(0, long.class, "userId", false, "USER_ID");
        public final static Property LowAlpha = new Property(1, int.class, "lowAlpha", false, "LOW_ALPHA");
        public final static Property HighAlpha = new Property(2, int.class, "highAlpha", false, "HIGH_ALPHA");
        public final static Property LowBeta = new Property(3, int.class, "lowBeta", false, "LOW_BETA");
        public final static Property HighBeta = new Property(4, int.class, "highBeta", false, "HIGH_BETA");
        public final static Property LowGamma = new Property(5, int.class, "lowGamma", false, "LOW_GAMMA");
        public final static Property MidGamma = new Property(6, int.class, "midGamma", false, "MID_GAMMA");
        public final static Property Theta = new Property(7, int.class, "theta", false, "THETA");
        public final static Property Delta = new Property(8, int.class, "delta", false, "DELTA");
        public final static Property CollectionDate = new Property(9, java.util.Date.class, "collectionDate", false, "COLLECTION_DATE");
    };


    public PowerEEGDao(DaoConfig config) {
        super(config);
    }
    
    public PowerEEGDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'POWER_EEG' (" + //
                "'USER_ID' INTEGER NOT NULL ," + // 0: userId
                "'LOW_ALPHA' INTEGER NOT NULL ," + // 1: lowAlpha
                "'HIGH_ALPHA' INTEGER NOT NULL ," + // 2: highAlpha
                "'LOW_BETA' INTEGER NOT NULL ," + // 3: lowBeta
                "'HIGH_BETA' INTEGER NOT NULL ," + // 4: highBeta
                "'LOW_GAMMA' INTEGER NOT NULL ," + // 5: lowGamma
                "'MID_GAMMA' INTEGER NOT NULL ," + // 6: midGamma
                "'THETA' INTEGER NOT NULL ," + // 7: theta
                "'DELTA' INTEGER NOT NULL ," + // 8: delta
                "'COLLECTION_DATE' INTEGER NOT NULL );"); // 9: collectionDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'POWER_EEG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PowerEEG entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
        stmt.bindLong(2, entity.getLowAlpha());
        stmt.bindLong(3, entity.getHighAlpha());
        stmt.bindLong(4, entity.getLowBeta());
        stmt.bindLong(5, entity.getHighBeta());
        stmt.bindLong(6, entity.getLowGamma());
        stmt.bindLong(7, entity.getMidGamma());
        stmt.bindLong(8, entity.getTheta());
        stmt.bindLong(9, entity.getDelta());
        stmt.bindLong(10, entity.getCollectionDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public PowerEEG readEntity(Cursor cursor, int offset) {
        PowerEEG entity = new PowerEEG( //
            cursor.getLong(offset + 0), // userId
            cursor.getInt(offset + 1), // lowAlpha
            cursor.getInt(offset + 2), // highAlpha
            cursor.getInt(offset + 3), // lowBeta
            cursor.getInt(offset + 4), // highBeta
            cursor.getInt(offset + 5), // lowGamma
            cursor.getInt(offset + 6), // midGamma
            cursor.getInt(offset + 7), // theta
            cursor.getInt(offset + 8), // delta
            new java.util.Date(cursor.getLong(offset + 9)) // collectionDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PowerEEG entity, int offset) {
        entity.setUserId(cursor.getLong(offset + 0));
        entity.setLowAlpha(cursor.getInt(offset + 1));
        entity.setHighAlpha(cursor.getInt(offset + 2));
        entity.setLowBeta(cursor.getInt(offset + 3));
        entity.setHighBeta(cursor.getInt(offset + 4));
        entity.setLowGamma(cursor.getInt(offset + 5));
        entity.setMidGamma(cursor.getInt(offset + 6));
        entity.setTheta(cursor.getInt(offset + 7));
        entity.setDelta(cursor.getInt(offset + 8));
        entity.setCollectionDate(new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(PowerEEG entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(PowerEEG entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
