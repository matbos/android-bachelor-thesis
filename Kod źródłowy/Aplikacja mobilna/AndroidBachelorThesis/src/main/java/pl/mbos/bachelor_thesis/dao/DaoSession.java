package pl.mbos.bachelor_thesis.dao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import pl.mbos.bachelor_thesis.dao.User;
import pl.mbos.bachelor_thesis.dao.Attention;
import pl.mbos.bachelor_thesis.dao.Meditation;
import pl.mbos.bachelor_thesis.dao.PoorSignal;
import pl.mbos.bachelor_thesis.dao.Blink;
import pl.mbos.bachelor_thesis.dao.PowerEEG;

import pl.mbos.bachelor_thesis.dao.UserDao;
import pl.mbos.bachelor_thesis.dao.AttentionDao;
import pl.mbos.bachelor_thesis.dao.MeditationDao;
import pl.mbos.bachelor_thesis.dao.PoorSignalDao;
import pl.mbos.bachelor_thesis.dao.BlinkDao;
import pl.mbos.bachelor_thesis.dao.PowerEEGDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig userDaoConfig;
    private final DaoConfig attentionDaoConfig;
    private final DaoConfig meditationDaoConfig;
    private final DaoConfig poorSignalDaoConfig;
    private final DaoConfig blinkDaoConfig;
    private final DaoConfig powerEEGDaoConfig;

    private final UserDao userDao;
    private final AttentionDao attentionDao;
    private final MeditationDao meditationDao;
    private final PoorSignalDao poorSignalDao;
    private final BlinkDao blinkDao;
    private final PowerEEGDao powerEEGDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        attentionDaoConfig = daoConfigMap.get(AttentionDao.class).clone();
        attentionDaoConfig.initIdentityScope(type);

        meditationDaoConfig = daoConfigMap.get(MeditationDao.class).clone();
        meditationDaoConfig.initIdentityScope(type);

        poorSignalDaoConfig = daoConfigMap.get(PoorSignalDao.class).clone();
        poorSignalDaoConfig.initIdentityScope(type);

        blinkDaoConfig = daoConfigMap.get(BlinkDao.class).clone();
        blinkDaoConfig.initIdentityScope(type);

        powerEEGDaoConfig = daoConfigMap.get(PowerEEGDao.class).clone();
        powerEEGDaoConfig.initIdentityScope(type);

        userDao = new UserDao(userDaoConfig, this);
        attentionDao = new AttentionDao(attentionDaoConfig, this);
        meditationDao = new MeditationDao(meditationDaoConfig, this);
        poorSignalDao = new PoorSignalDao(poorSignalDaoConfig, this);
        blinkDao = new BlinkDao(blinkDaoConfig, this);
        powerEEGDao = new PowerEEGDao(powerEEGDaoConfig, this);

        registerDao(User.class, userDao);
        registerDao(Attention.class, attentionDao);
        registerDao(Meditation.class, meditationDao);
        registerDao(PoorSignal.class, poorSignalDao);
        registerDao(Blink.class, blinkDao);
        registerDao(PowerEEG.class, powerEEGDao);
    }
    
    public void clear() {
        userDaoConfig.getIdentityScope().clear();
        attentionDaoConfig.getIdentityScope().clear();
        meditationDaoConfig.getIdentityScope().clear();
        poorSignalDaoConfig.getIdentityScope().clear();
        blinkDaoConfig.getIdentityScope().clear();
        powerEEGDaoConfig.getIdentityScope().clear();
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public AttentionDao getAttentionDao() {
        return attentionDao;
    }

    public MeditationDao getMeditationDao() {
        return meditationDao;
    }

    public PoorSignalDao getPoorSignalDao() {
        return poorSignalDao;
    }

    public BlinkDao getBlinkDao() {
        return blinkDao;
    }

    public PowerEEGDao getPowerEEGDao() {
        return powerEEGDao;
    }

}
