package pl.mbos.bachelor_thesis.dao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

import android.os.Parcel;
import android.os.Parcelable;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.Date;
import java.util.List;

/**
 * Entity mapped to table BLINK.
 */
public class Blink implements Parcelable {

    private long userId;
    private int value;
    /**
     * Not-null value.
     */
    private java.util.Date collectionDate;

    // KEEP FIELDS - put your custom fields here
    public static Parcelable.Creator<Blink> CREATOR = new Parcelable.Creator<Blink>() {
        @Override
        public Blink createFromParcel(Parcel parcel) {
            return new Blink(parcel.readLong(), parcel.readInt(), new Date(parcel.readLong()));
        }

        @Override
        public Blink[] newArray(int i) {
            return new Blink[i];
        }
    };
    // KEEP FIELDS END

    public Blink() {
    }

    public Blink(long userId, int value, java.util.Date collectionDate) {
        this.userId = userId;
        this.value = value;
        this.collectionDate = collectionDate;
    }

    public long getUserId() {
        return userId;
    }

    public void setUserId(long userId) {
        this.userId = userId;
    }

    public int getValue() {
        return value;
    }

    public void setValue(int value) {
        this.value = value;
    }

    /**
     * Not-null value.
     */
    public java.util.Date getCollectionDate() {
        return collectionDate;
    }

    /**
     * Not-null value; ensure this value is available before it is saved to the database.
     */
    public void setCollectionDate(java.util.Date collectionDate) {
        this.collectionDate = collectionDate;
    }

    // KEEP METHODS - put your custom methods here
    public static Blink parseJSON(JSONObject object) {
        Blink blink = null;
        try {
            blink = new Blink(
                    object.getLong("user"),
                    object.getInt("value"),
                    new Date(object.getLong("date"))
            );
        } catch (JSONException e) {
            throw new RuntimeException("Passed JSON was invalid! " + e.getMessage());
        }
        return blink;
    }


    public String toJSON() {
        StringBuilder jsonBuilder = new StringBuilder();
        jsonBuilder.append("{ ");
        jsonBuilder.append("\"user\" : " + userId + ",");
        jsonBuilder.append("\"value\" : " + value + ",");
        jsonBuilder.append("\"date\" : " + collectionDate.getTime());
        jsonBuilder.append(" }");
        return jsonBuilder.toString();
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel parcel, int i) {
        parcel.writeLong(userId);
        parcel.writeInt(value);
        parcel.writeLong(collectionDate.getTime());
    }

    public Blink(Blink a) {
        this.userId = a.getUserId();
        this.value = a.getValue();
        this.collectionDate = a.getCollectionDate();
    }

    public static Blink[] convertToArray(List<Blink> data) {
        Blink[] array = new Blink[data.size()];
        int i = 0;
        for (Blink a : data) {
            array[i++] = new Blink(a);
        }
        return array;
    }

    public static Blink[] convertParcelableToBlink(Parcelable[] data) {
        Blink[] array = new Blink[data.length];
        int i = 0;
        for (Parcelable parcel : data) {
            array[i++] = (Blink) parcel;
        }
        return array;
    }

    /**
     * Overriden so that it returns json representation of the object
     * @return json representation
     */
    @Override
    public String toString() {
        return toJSON();
    }
    public static String toJSONArray(List<Blink> list) {
        StringBuilder jsonBuilder = new StringBuilder();
        // [{'user': 1, "value" : 761, "date" :1384718377776 }],
        jsonBuilder.append("[ ");
        for(Blink b : list){
            jsonBuilder.append("{ ");
            jsonBuilder.append("\"user\" : " + b.userId + ",");
            jsonBuilder.append("\"value\" : " + b.value + ",");
            jsonBuilder.append("\"date\" : " + b.collectionDate.getTime());
            jsonBuilder.append(" },");
        }
        jsonBuilder.deleteCharAt(jsonBuilder.length()-1);
        jsonBuilder.append(" ]");
        String test = jsonBuilder.toString();
        return jsonBuilder.toString();
    }
    // KEEP METHODS END

}
