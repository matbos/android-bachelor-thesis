package pl.mbos.bachelor_thesis.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import pl.mbos.bachelor_thesis.dao.Blink;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BLINK.
*/
public class BlinkDao extends AbstractDao<Blink, Void> {

    public static final String TABLENAME = "BLINK";

    /**
     * Properties of entity Blink.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserId = new Property(0, long.class, "userId", false, "USER_ID");
        public final static Property Value = new Property(1, int.class, "value", false, "VALUE");
        public final static Property CollectionDate = new Property(2, java.util.Date.class, "collectionDate", false, "COLLECTION_DATE");
    };


    public BlinkDao(DaoConfig config) {
        super(config);
    }
    
    public BlinkDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BLINK' (" + //
                "'USER_ID' INTEGER NOT NULL ," + // 0: userId
                "'VALUE' INTEGER NOT NULL ," + // 1: value
                "'COLLECTION_DATE' INTEGER NOT NULL );"); // 2: collectionDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BLINK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Blink entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUserId());
        stmt.bindLong(2, entity.getValue());
        stmt.bindLong(3, entity.getCollectionDate().getTime());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Blink readEntity(Cursor cursor, int offset) {
        Blink entity = new Blink( //
            cursor.getLong(offset + 0), // userId
            cursor.getInt(offset + 1), // value
            new java.util.Date(cursor.getLong(offset + 2)) // collectionDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Blink entity, int offset) {
        entity.setUserId(cursor.getLong(offset + 0));
        entity.setValue(cursor.getInt(offset + 1));
        entity.setCollectionDate(new java.util.Date(cursor.getLong(offset + 2)));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Blink entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Blink entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
