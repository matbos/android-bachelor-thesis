package pl.mbos.bachelor_thesis.objs;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

import org.json.JSONException;
import org.json.JSONObject;

import java.util.Date;
import java.util.List;

/**
 * Entity mapped to table POWER_EEG.
 */
public class PowerEEG {

	private long userId;
	private int lowAlpha;
	private int highAlpha;
	private int lowBeta;
	private int highBeta;
	private int lowGamma;
	private int midGamma;
	private int theta;
	private int delta;
	/**
	 * Not-null value.
	 */
	private java.util.Date collectionDate;

	public PowerEEG() {
	}

	public PowerEEG(long userId, int lowAlpha, int highAlpha, int lowBeta, int highBeta, int lowGamma, int midGamma, int theta, int delta, java.util.Date collectionDate) {
		this.userId = userId;
		this.lowAlpha = lowAlpha;
		this.highAlpha = highAlpha;
		this.lowBeta = lowBeta;
		this.highBeta = highBeta;
		this.lowGamma = lowGamma;
		this.midGamma = midGamma;
		this.theta = theta;
		this.delta = delta;
		this.collectionDate = collectionDate;
	}

	public long getUserId() {
		return userId;
	}

	public void setUserId(long userId) {
		this.userId = userId;
	}

	public int getLowAlpha() {
		return lowAlpha;
	}

	public void setLowAlpha(int lowAlpha) {
		this.lowAlpha = lowAlpha;
	}

	public int getHighAlpha() {
		return highAlpha;
	}

	public void setHighAlpha(int highAlpha) {
		this.highAlpha = highAlpha;
	}

	public int getLowBeta() {
		return lowBeta;
	}

	public void setLowBeta(int lowBeta) {
		this.lowBeta = lowBeta;
	}

	public int getHighBeta() {
		return highBeta;
	}

	public void setHighBeta(int highBeta) {
		this.highBeta = highBeta;
	}

	public int getLowGamma() {
		return lowGamma;
	}

	public void setLowGamma(int lowGamma) {
		this.lowGamma = lowGamma;
	}

	public int getMidGamma() {
		return midGamma;
	}

	public void setMidGamma(int midGamma) {
		this.midGamma = midGamma;
	}

	public int getTheta() {
		return theta;
	}

	public void setTheta(int theta) {
		this.theta = theta;
	}

	public int getDelta() {
		return delta;
	}

	public void setDelta(int delta) {
		this.delta = delta;
	}

	/**
	 * Not-null value.
	 */
	public java.util.Date getCollectionDate() {
		return collectionDate;
	}

	/**
	 * Not-null value; ensure this value is available before it is saved to the
	 * database.
	 */
	public void setCollectionDate(java.util.Date collectionDate) {
		this.collectionDate = collectionDate;
	}

	public static PowerEEG parseJSON(JSONObject object) {
		PowerEEG power = null;
		try {
			power = new PowerEEG(object.getLong("user"), object.getInt("lowAlpha"), object.getInt("highAlpha"), object.getInt("lowBeta"), object.getInt("highBeta"), object.getInt("lowGamma"),
					object.getInt("midGamma"), object.getInt("theta"), object.getInt("delta"), new Date(object.getLong("date")));
		} catch (JSONException e) {
			throw new RuntimeException("Passed JSON was invalid! " + e.getMessage());
		}
		return power;
	}

	public String toJSON() {
		StringBuilder jsonBuilder = new StringBuilder();
		jsonBuilder.append("{ ");
		jsonBuilder.append("\"user\" : " + userId + ",");
		jsonBuilder.append("\"lowAlpha\" : " + lowAlpha + ",");
		jsonBuilder.append("\"highAlpha\" : " + highAlpha + ",");
		jsonBuilder.append("\"lowBeta\" : " + lowBeta + ",");
		jsonBuilder.append("\"highBeta\" : " + highBeta + ",");
		jsonBuilder.append("\"lowGamma\" : " + lowGamma + ",");
		jsonBuilder.append("\"midGamma\" : " + midGamma + ",");
		jsonBuilder.append("\"theta\" : " + theta + "\",");
		jsonBuilder.append("\"delta\" : " + delta + "\",");
		jsonBuilder.append("\"date\" : " + collectionDate.getTime() + "");
		jsonBuilder.append(" }");
		return jsonBuilder.toString();
	}

	public PowerEEG(PowerEEG a) {
		this.userId = a.getUserId();
		this.lowAlpha = a.getLowAlpha();
		this.highAlpha = a.getHighAlpha();
		this.lowBeta = a.getLowBeta();
		this.highBeta = a.getHighBeta();
		this.lowGamma = a.getLowGamma();
		this.midGamma = a.getMidGamma();
		this.theta = a.getTheta();
		this.delta = a.getDelta();
		this.collectionDate = a.getCollectionDate();
	}

	public static PowerEEG[] convertToArray(List<PowerEEG> data) {
		PowerEEG[] array = new PowerEEG[data.size()];
		int i = 0;
		for (PowerEEG a : data) {
			array[i++] = new PowerEEG(a);
		}
		return array;
	}
	
	/** 
	 * Exemplary usage of builder method pattern
	 * 
	 * @author Mateusz
	 * 
	 */
	public static class Builder {
		private long userId = -999;
		private int lowAlpha = -999;
		private int highAlpha = -999;
		private int lowBeta = -999;
		private int highBeta = -999;
		private int lowGamma = -999;
		private int midGamma = -999;
		private int theta = -999;
		private int delta = -999;
		private java.util.Date collectionDate = null;

		public Builder() {
		}

		public void addUserId(long userId) {
			this.userId = userId;
		}

		public void addLowAlpha(int lowAlpha) {
			this.lowAlpha = lowAlpha;
		}

		public void addHighAlpha(int highAlpha) {
			this.highAlpha = highAlpha;
		}

		public void addLowBeta(int lowBeta) {
			this.lowBeta = lowBeta;
		}

		public void addHighBeta(int highBeta) {
			this.highBeta = highBeta;
		}

		public void addLowGamma(int lowGamma) {
			this.lowGamma = lowGamma;
		}

		public void addMidGamma(int midGamma) {
			this.midGamma = midGamma;
		}

		public void addTheta(int theta) {
			this.theta = theta;
		}

		public void addDelta(int delta) {
			this.delta = delta;
		}

		public void addCollectionDate(java.util.Date collectionDate) {
			this.collectionDate = collectionDate;
		}
		
		public PowerEEG build() {
			return new PowerEEG(userId, lowAlpha, highAlpha, lowBeta, highBeta, lowGamma, midGamma, theta, delta, (collectionDate != null) ? collectionDate : new Date(0));
		}
	}
}
